#!/usr/bin/env node

/**
 * External dependencies.
 */

var electron = require('electron');
var request = require('superagent');

/**
 * Internal dependencies.
 */

var Formatter = require('../lib/formatter/dot');


/**
 * Help message.
 */

var help = [
   'Usage: depviz <module-name>',
  '',
   'Options:',
   '',
   '  --verbose   verbose mode',
   '  --out       specify the name of the PNG image',
   '  --help      display this help message',
   '  --version   display the version number',
   '',
].join('\n');

/**
 * Args.
 */

var args = electron.argv();

/**
 * Module name.
 */

var name = args.commands[0];

/**
 * Out.
 */

var out = args.params.out || name;

// --version

if (args.modes.indexOf('--version') > -1) {
  console.log(require('../package.json').version);
  process.exit(0);
}

// --help

if (!name || !out || args.modes.indexOf('--help') > -1) {
  console.log(help);
  process.exit(0);
}

/**
 * Notify the user that the module called `name`
 * cannot be found.
 *
 * @param {String} name
 * @api private
 */

function notFound(name) {
  console.error('The module "' + name + '" cannot be found');
  process.exit(0);
}

/**
 * Search for the dependencies of `app`.
 *
 * @param {String} name
 * @param {Function} end
 * @param {Object} [store]
 * @api private
 */

function search(name, end, store) {
  store = store || Object.create(null);

  if (store[name]) return end(store);
  store[name] = [];

  request('http://registry.npmjs.org/' + name, function(err, res) {
    if (err) throw err;
    if (!Object.keys(res.body).length) return notFound(name);
    var ver = res.body['dist-tags'].latest;
    var dependencies = Object.keys(res.body.versions[ver].dependencies || {});
    if (dependencies.length === 0) return end();
    var i = 0;

    function done() {
      if (++i >= dependencies.length) end(store);
    }

    dependencies.forEach(function(key) {
      store[name].push(key);
      search(key, done, store);
    });
  });
}

search(name, function(store) {
  new Formatter(store).render(out);
});
